package com.ugraks.project1.Boxing // Kendi paket adƒ±nƒ±z

import androidx.compose.animation.AnimatedVisibility
import androidx.compose.foundation.Image
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.itemsIndexed
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState // StateFlow'u izlemek i√ßin
import androidx.compose.runtime.getValue // State deƒüerini almak i√ßin
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
// Boks √∂ƒüesi data class'ƒ± yerine Entity kullanƒ±lacak
// import com.ugraks.project1.Boxing.BoxingItem
// import com.ugraks.project1.Boxing.loadBoxingDataFromAssets // Artƒ±k Composable'da kullanƒ±lmƒ±yor
import com.ugraks.project1.Boxing.getBoxingImageResource // Image resource fonksiyonu hala burada veya Utils dosyasƒ±nda olabilir
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.hilt.navigation.compose.hiltViewModel // ViewModel'ƒ± inject etmek i√ßin
import androidx.navigation.NavController
import com.ugraks.project1.R // R sƒ±nƒ±fƒ±nƒ± import edin
import com.ugraks.project1.data.local.entity.BoxingItemEntity // YENƒ∞: BoxingItemEntity importu
import com.ugraks.project1.ui.viewmodels.BoxingViewModel // YENƒ∞: BoxingViewModel importu


@Composable
fun BoxingDetailListScreen(
    navController: NavController,
    selectedCategories: List<String>, // Ba≈ülƒ±k i√ßin hala parametre olarak gelebilir (NavArgs'tan)
    // Boks √∂ƒüeleri listesi artƒ±k ViewModel'dan gelecek, parametre kaldƒ±rƒ±ldƒ±
    // allBoxingItems: List<BoxingItem> // Bu parametre kaldƒ±rƒ±ldƒ±
    viewModel: BoxingViewModel = hiltViewModel() // YENƒ∞: ViewModel inject et
) {
    // Boks √∂ƒüeleri listesi artƒ±k ViewModel'dan geliyor ve ViewModel'da filtreleniyor
    // val filteredBoxingItems = allBoxingItems.filter { it.category in selectedCategories } // Bu satƒ±r kaldƒ±rƒ±ldƒ±

    // ViewModel'dan filtrelenmi≈ü boks √∂ƒüeleri listesini StateFlow olarak izle
    val filteredBoxingItems by viewModel.filteredBoxingItems.collectAsState() // YENƒ∞: ViewModel'dan al

    // Geni≈ületilmi≈ü √∂ƒüe state'i (UI state'i olarak kalƒ±r, tipi BoxingItemEntity olacak)
    val expandedItem = remember { mutableStateOf<BoxingItemEntity?>(null) } // YENƒ∞: Tipi BoxingItemEntity?


    Box(modifier = Modifier.fillMaxSize()) {

        // üîô Back Button
        IconButton(
            onClick = { navController.navigateUp() },
            modifier = Modifier
                .align(Alignment.TopStart)
                .padding(top = 40.dp, start = 20.dp)
        ) {
            Icon(
                imageVector = Icons.Default.ArrowBack,
                contentDescription = "Go Back",
                tint = MaterialTheme.colorScheme.primary,
                modifier = Modifier.size(30.dp)
            )
        }

        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(horizontal = 16.dp)
                .padding(top = 90.dp) // Space for back button and title
        ) {

            // üè∑ Title (Parametreden gelen kategorileri kullanƒ±r)
            Text(
                text = "${selectedCategories.joinToString(", ")}",
                style = MaterialTheme.typography.titleMedium.copy(
                    fontFamily = FontFamily.SansSerif,
                    fontSize = 26.sp,
                    color = MaterialTheme.colorScheme.primary,
                    fontWeight = FontWeight.Bold
                ),
                textAlign = TextAlign.Center,
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 24.dp)
            )

            // üìã Boxing Item Cards (ViewModel'dan gelen filteredBoxingItems listesini kullanƒ±r)
            // Liste bo≈üsa (ViewModel hen√ºz y√ºklemediyse veya filtre sonucu bo≈üsa) bo≈ü liste g√∂sterilir
            LazyColumn(
                contentPadding = PaddingValues(bottom = 80.dp)
            ) {
                // itemsIndexed ViewModel'dan gelen filteredBoxingItems listesini kullanƒ±r (List<BoxingItemEntity>)
                itemsIndexed(filteredBoxingItems, key = { _, item -> item.name }) { _, item -> // item artƒ±k BoxingItemEntity tipinde
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(vertical = 12.dp)
                            .clickable {
                                expandedItem.value = if (expandedItem.value == item) null else item
                            },
                        elevation = CardDefaults.cardElevation(defaultElevation = 8.dp),
                        shape = RoundedCornerShape(16.dp)
                    ) {
                        Column(modifier = Modifier.padding(16.dp)) {
                            // Boxing Item Name (item.name - BoxingItemEntity'de mevcut)
                            Text(
                                text = item.name, // YENƒ∞: BoxingItemEntity'den adƒ± al
                                style = MaterialTheme.typography.titleMedium.copy(
                                    fontWeight = FontWeight.Bold,
                                    fontSize = 20.sp,
                                    color = MaterialTheme.colorScheme.primary,
                                    textAlign = TextAlign.Center
                                ),
                                modifier = Modifier
                                    .padding(bottom = 8.dp)
                                    .align(Alignment.CenterHorizontally)
                            )

                            // Image or Icon (item.name - BoxingItemEntity'de mevcut)
                            val currentImageResource = if (expandedItem.value == item) {
                                // Kart a√ßƒ±ksa, √∂ƒüeye √∂zel resmi al
                                getBoxingImageResource(item.name) // item.name hala String
                            } else {
                                // Kart kapalƒ±ysa, varsayƒ±lan ikonunu g√∂ster
                                R.drawable.baseline_sports_martial_arts_24 // Sizin varsayƒ±lan ikonunuz
                            }

                            Image(
                                painter = painterResource(id = currentImageResource),
                                contentDescription = if (expandedItem.value == item) item.name else "Boxing Icon",
                                modifier = Modifier
                                    .fillMaxWidth()
                                    .height(200.dp)
                                    .padding(bottom = 12.dp)
                                    .clip(RoundedCornerShape(16.dp)),
                                // contentScale = ContentScale.Crop
                            )

                            // Boxing Item Details (Animated Visibility) (BoxingItemEntity'den alƒ±nƒ±r)
                            // AnimatedVisibility'nin visible kontrol√º hala BoxingItemEntity tipini kullanƒ±r
                            AnimatedVisibility(visible = expandedItem.value == item) {
                                Column {
                                    // category (item.category - BoxingItemEntity'de mevcut)
                                    Text(
                                        text = "Category: ${item.category}", // YENƒ∞: BoxingItemEntity'den al
                                        style = MaterialTheme.typography.bodyMedium.copy(
                                            color = MaterialTheme.colorScheme.onBackground
                                        ),
                                        modifier = Modifier.padding(bottom = 8.dp)
                                    )
                                    // description (item.description - BoxingItemEntity'de mevcut)
                                    Text(
                                        text = "Description: ${item.description}", // YENƒ∞: BoxingItemEntity'den al
                                        style = MaterialTheme.typography.bodyMedium.copy(
                                            color = MaterialTheme.colorScheme.onBackground
                                        ),
                                        modifier = Modifier.padding(bottom = 8.dp)
                                    )
                                    // details (item.details - BoxingItemEntity'de mevcut)
                                    Text(
                                        text = "Details:", // Changed label
                                        style = MaterialTheme.typography.bodyMedium.copy(
                                            fontWeight = FontWeight.Medium
                                        ),
                                        modifier = Modifier.padding(bottom = 8.dp)
                                    )

                                    // details, potansiyel olarak ayƒ±rƒ±cƒ± ile b√∂l√ºnm√º≈üse
                                    item.details.split(" | ").forEach { step -> // YENƒ∞: BoxingItemEntity'den al, | ayƒ±rƒ±cƒ± varsayƒ±ldƒ±
                                        Text(
                                            text = step.trim(),
                                            style = MaterialTheme.typography.bodyMedium.copy(
                                                color = MaterialTheme.colorScheme.onBackground
                                            ),
                                            modifier = Modifier.padding(bottom = 4.dp)
                                        )
                                    }
                                }
                            }
                        }
                    }
                }
                // Liste bo≈üsa bilgi mesajƒ± g√∂ster
                item {
                    if (filteredBoxingItems.isEmpty()) {
                        Box(
                            modifier = Modifier.fillParentMaxSize(), // LazyColumn i√ßinde tam alanƒ± kapla
                            contentAlignment = Alignment.Center
                        ) {
                            Text(
                                "No boxing items found for selected categories.",
                                style = MaterialTheme.typography.bodyLarge,
                                color = MaterialTheme.colorScheme.onSurfaceVariant,
                                textAlign = TextAlign.Center,
                                modifier = Modifier.padding(16.dp)
                            )
                        }
                    }
                }
            }
        }
    }
}

// getBoxingImageResource fonksiyonu bu dosyadan kaldƒ±rƒ±lmadƒ±, hala burada veya ayrƒ± bir Utils dosyasƒ±nda olabilir.
// fun getBoxingImageResource(itemName: String): Int { ... }

// BoxingItem data class'ƒ± bu dosyadan kaldƒ±rƒ±ldƒ±, kendi dosyasƒ±nda (Boxing.kt) tanƒ±mlƒ±
// data class BoxingItem(...)